from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QPushButton, QFileDialog, QLabel, QMenu, QInputDialog, QFrame, QDialog
from PyQt6.QtGui import QPixmap, QFont, QAction, QIcon
from PyQt6.QtCore import Qt, QPoint, QEasingCurve, QPropertyAnimation, QRect
import os
import base64
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.hashes import SHA256
from cryptography.fernet import Fernet
import sys
from PyQt6.QtCore import QDir

logo_path = os.path.join(sys._MEIPASS, 'encolo.png') if hasattr(sys, '_MEIPASS') else 'encolo.png'
ico_path = os.path.join(sys._MEIPASS, 'encolo.png') if hasattr(sys, '_MEIPASS') else 'encolo.png'

SALT = b'some_salt_value'  # Åžifre tÃ¼retmek iÃ§in sabit bir salt kullanÄ±lÄ±yor.

def get_logo_path():
    # PyInstaller ile paketlendiÄŸinde kullanÄ±lan yol
    if hasattr(sys, "_MEIPASS"):
        return os.path.join(sys._MEIPASS, "encolo.png")
    
    # Sabit bir sistem yolu (Ã¶r. /usr/share/)
    elif os.path.exists("/usr/share/icons/hicolor/48x48/apps/encolo.png"):
        return "/usr/share/icons/hicolor/48x48/apps/encolo.png"
    
    # KullanÄ±cÄ± ev dizinindeki bir yol
    home_dir = os.path.expanduser("~")
    user_logo_path = os.path.join(home_dir, ".enco", "encolo.png")
    if os.path.exists(user_logo_path):
        return user_logo_path

    # VarsayÄ±lan olarak bulunduÄŸu dizindeki encolo.png
    return "encolo.png"

# Logo dosyasÄ±nÄ±n yolu
logo_path = get_logo_path()




def derive_key(password: str) -> bytes:
    """KullanÄ±cÄ± tarafÄ±ndan girilen ÅŸifreye gÃ¶re bir anahtar tÃ¼retir."""
    kdf = PBKDF2HMAC(
        algorithm=SHA256(),
        length=32,
        salt=SALT,
        iterations=100000,
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))


class FileEncryptionApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("EnCo Dosya Åžifrele/Ã‡Ã¶z ")
        self.setWindowIcon(QIcon("encolo.png"))  # Uygulama simgesini ekliyoruz
        self.setGeometry(300, 200, 600, 400)
        self.setFixedSize(350, 450)  # Formu sabit boyutlu hale getiriyoruz.
        self.key = None
        self.setStyleSheet("background-color: #2D2F31; color: #FFD24C;")
        self.setWindowOpacity(0.9)  # %80 ÅŸeffaflÄ±k
        self.initUI()

    def initUI(self):
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        layout = QVBoxLayout()

        # Logo kÄ±smÄ± (Ã¼st kÄ±smÄ±na ekliyoruz)
        self.logo_label = QLabel(self)
        pixmap = QPixmap("encolo.png")  # Logoyu yÃ¼klÃ¼yoruz (encolo.png dosyasÄ±nÄ± eklediÄŸinizden emin olun)
        self.logo_label.setPixmap(pixmap)
        self.logo_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.logo_label.setFixedHeight(100)  # Logo yÃ¼ksekliÄŸini ayarlÄ±yoruz

        # Alt kÄ±sÄ±mda diÄŸer UI Ã¶ÄŸeleri
        self.label = QLabel("Dosya seÃ§ilmedi.")
        self.label.setFont(QFont("Arial", 12))
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        # ButtonlarÄ± alt alta yerleÅŸtiriyoruz.
        button_layout = QVBoxLayout()

        self.encrypt_button = self.create_button("ðŸ”’ DosyayÄ± Åžifrele", self.encrypt_file)
        self.decrypt_button = self.create_button("ðŸ”‘ DosyayÄ± Ã‡Ã¶z", self.decrypt_file)
       # self.file_button = self.create_button("ðŸ“ƒ Dosya SeÃ§", self.select_file)

       # button_layout.addWidget(self.file_button)
        button_layout.addWidget(self.encrypt_button)
        button_layout.addWidget(self.decrypt_button)

        # SÃ¼rÃ¼kle ve bÄ±rak Ã§erÃ§evesi
        self.drop_frame = QFrame(self)
        self.drop_frame.setFrameShape(QFrame.Shape.StyledPanel)
        self.drop_frame.setStyleSheet("background-color: #FF967615; border-radius: 10px; height: 200px; margin: 20px;")
        self.drop_frame.setAcceptDrops(True)
        self.drop_frame.setObjectName("drop_frame")

        # SÃ¼rÃ¼kle bÄ±rak metnini ekliyoruz
        self.drop_label = QLabel("DosyayÄ± SÃ¼rÃ¼kle BÄ±rak", self.drop_frame)
        self.drop_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.drop_label.setFont(QFont("Arial", 13))
        self.drop_label.setStyleSheet("color: white;")

        # "Dosya SeÃ§mek Ä°Ã§in TÄ±klayÄ±nÄ±z." yazÄ±sÄ±nÄ± ekliyoruz
        self.click_to_select_label = QLabel("Dosya SeÃ§mek Ä°Ã§in TÄ±klayÄ±nÄ±z.", self.drop_frame)
        self.click_to_select_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.click_to_select_label.setFont(QFont("Arial", 9))  # KÃ¼Ã§Ã¼k font
        self.click_to_select_label.setStyleSheet("color: #A9A9A9;")  # Gri renk

        # SÃ¼rÃ¼kle-bÄ±rak alanÄ±nÄ± merkezi hale getiriyoruz
        self.drop_frame.setLayout(QVBoxLayout())
        self.drop_frame.layout().addWidget(self.drop_label)
        self.drop_frame.layout().addWidget(self.click_to_select_label)  # Alt yazÄ±yÄ± ekliyoruz
        self.drop_frame.layout().setContentsMargins(0, 0, 0, 0)

        # Layout'a ekliyoruz
        layout.addWidget(self.logo_label)  # Logo ekleniyor
        layout.addWidget(self.label)
        layout.addWidget(self.drop_frame)
        layout.addLayout(button_layout)

        self.central_widget.setLayout(layout)

        # MenÃ¼ butonu
        self.menu_button = QPushButton("â‹®", self)
        self.menu_button.setStyleSheet("""
            font-size: 20px;
            background-color: #2D2F31;
            color: #FFD24C;
            border: none;
            padding: 10px;
        """)
        self.menu_button.setFixedSize(40, 40)
        self.menu_button.clicked.connect(self.show_menu)
        self.menu_button.move(self.width() - 50, 20)

        self.file_path = None

        # SÃ¼rÃ¼kle bÄ±rak kÄ±smÄ±na tÄ±klanabilirlik ekliyoruz
        self.drop_frame.mousePressEvent = self.on_drop_frame_clicked

    def create_button(self, text: str, action):
        button = QPushButton(text)
        button.setStyleSheet(""" 
            background-color: #FFA6841E;
            color: #2D2F31;
            font-size: 14px;
            border-radius: 10px;
            padding: 10px;
            margin: 10px;
            width: 200px;
        """)
        button.clicked.connect(action)
        button.setFixedHeight(60)

        # Hover animasyonu
        button.setStyleSheet("""
            QPushButton {
                background-color: #FFA6841E;
                color: #2D2F31;
                font-size: 14px;
                border-radius: 10px;
                padding: 10px;
                margin: 10px;
                width: 200px;
            }
            QPushButton:hover {
                background-color: #FFB300;
                transition: all 0.3s;
            }
        """)

        # Animasyon: butonlarÄ±n bÃ¼yÃ¼mesi
        self.animate_button(button)
        
        return button

    def animate_button(self, button):
        animation = QPropertyAnimation(button, b"geometry")
        animation.setDuration(300)
        animation.setStartValue(button.geometry())
        animation.setEndValue(QRect(button.x() - 5, button.y() - 5, button.width() + 10, button.height() + 10))
        animation.setEasingCurve(QEasingCurve.Type.OutBounce)
        animation.start()

    def select_file(self):
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self, "Bir dosya seÃ§in")
        if file_path:
            self.file_path = file_path
            self.label.setText(f"SeÃ§ilen Dosya: {os.path.basename(file_path)}")

    def on_drop_frame_clicked(self, event):
        """SÃ¼rÃ¼kle bÄ±rak alanÄ±na tÄ±klandÄ±ÄŸÄ±nda dosya seÃ§imi aÃ§Ä±lmasÄ±nÄ± saÄŸlÄ±yor."""
        self.select_file()

    def ask_password(self) -> str:
        """KullanÄ±cÄ±dan bir ÅŸifre girmesini ister."""
        password, ok = QInputDialog.getText(self, "Åžifre Girin", "Åžifre (4-64 karakter):")
        if ok and 4 <= len(password) <= 64:
            return password
        elif ok:
            self.label.setText("Åžifre uzunluÄŸu 4-64 karakter arasÄ±nda olmalÄ±dÄ±r!")
        return None

    def encrypt_file(self):
        if not self.file_path:
            self.label.setText("LÃ¼tfen bir dosya seÃ§in!")
            return

        password = self.ask_password()
        if not password:
            return

        self.key = derive_key(password)
        cipher = Fernet(self.key)

        try:
            with open(self.file_path, "rb") as file:
                data = file.read()

            encrypted_data = cipher.encrypt(data)
            encrypted_path = f"{self.file_path}.alg"

            with open(encrypted_path, "wb") as file:
                file.write(encrypted_data)

            os.remove(self.file_path)
            self.file_path = encrypted_path
            self.label.setText(f"Åžifreleme tamamlandÄ±: {os.path.basename(encrypted_path)}")

        except Exception as e:
            self.label.setText(f"Hata: {str(e)}")

    def decrypt_file(self):
        if not self.file_path or not self.file_path.endswith(".alg"):
            self.label.setText("LÃ¼tfen bir ÅŸifrelenmiÅŸ dosya seÃ§in!")
            return

        password = self.ask_password()
        if not password:
            return

        self.key = derive_key(password)
        cipher = Fernet(self.key)

        try:
            with open(self.file_path, "rb") as file:
                encrypted_data = file.read()

            decrypted_data = cipher.decrypt(encrypted_data)
            original_path = self.file_path.rsplit(".alg", 1)[0]

            with open(original_path, "wb") as file:
                file.write(decrypted_data)

            os.remove(self.file_path)
            self.file_path = original_path
            self.label.setText(f"Ã‡Ã¶zme tamamlandÄ±: {os.path.basename(original_path)}")

        except Exception as e:
            self.label.setText(f"Hata: {str(e)}")

    def dragEnterEvent(self, event):
        """SÃ¼rÃ¼kle bÄ±rak iÅŸlemi iÃ§in gerekli olan fonksiyon."""
        if event.mimeData().hasUrls():
            event.acceptProposedAction()

    def dropEvent(self, event):
        """SÃ¼rÃ¼kle bÄ±rak iÅŸlemi gerÃ§ekleÅŸtiÄŸinde dosya yolu alÄ±r."""
        file_path = event.mimeData().urls()[0].toLocalFile()
        self.file_path = file_path
        self.label.setText(f"SeÃ§ilen Dosya: {os.path.basename(file_path)}")

    def show_menu(self):
        menu = QMenu(self)
        about_action = QAction("HakkÄ±nda", self)
        about_action.triggered.connect(self.show_about)
        menu.addAction(about_action)
        menu.exec(self.menu_button.mapToGlobal(QPoint(0, 0)))

    def show_about(self):
        about_text = (
            "EnCo Dosya Åžifreleme UygulamasÄ±\n\n"
            "Bu uygulama, dosyalarÄ±nÄ±zÄ± gÃ¼venli bir ÅŸekilde ÅŸifreleyip, ÅŸifrelerini Ã§Ã¶zmenizi saÄŸlar.\n"
            "KullanÄ±cÄ± dostu arayÃ¼zÃ¼ ile dosyalarÄ±nÄ±zÄ± kolayca yÃ¶netebilirsiniz. \n"
            "ALG YazÄ±lÄ±m Inc.Â© EnCo TÃ¼m HaklarÄ± SaklÄ±dÄ±r. KullanÄ±mÄ± ve DaÄŸÄ±tÄ±mÄ± Serbesttir. DeÄŸiÅŸiklik YapÄ±lamaz! \n"
            "www.algyazilim.com | info@algyazilim.com \n"
            "GeliÅŸtirici: Fatih Ã–NDER (cektor) | fatih@algyazilim.com | https://github.com/cektor"
        )
        self.show_about_dialog(about_text)

    def show_about_dialog(self, about_text):
        about_dialog = QDialog(self)
        about_dialog.setWindowTitle("HakkÄ±nda")
        about_dialog.setWindowIcon(QIcon("encolo.png"))  # HakkÄ±nda penceresi simgesi ekleniyor
        about_dialog.setGeometry(200, 200, 300, 200)

        layout = QVBoxLayout()

        about_label = QLabel(about_text)
        layout.addWidget(about_label)

        close_button = QPushButton("Kapat")
        close_button.clicked.connect(about_dialog.close)
        layout.addWidget(close_button)

        about_dialog.setLayout(layout)
        about_dialog.exec()  # QDialog iÃ§in exec() kullanÄ±labilir


if __name__ == "__main__":
    app = QApplication([])
    window = FileEncryptionApp()
    window.show()
    app.exec()
